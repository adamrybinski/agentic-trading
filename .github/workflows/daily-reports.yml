name: Daily SEC Analysis Reports

on:
  # Run daily at 6 AM UTC (after markets close)
  schedule:
    - cron: '0 6 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      target_date:
        description: 'Date to analyze (YYYY-MM-DD). Leave empty for yesterday.'
        required: false
        type: string
      max_companies:
        description: 'Maximum number of companies to analyze (leave empty for all)'
        required: false
        type: number

jobs:
  daily-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 2 hours timeout
    
    permissions:
      contents: write  # Allow pushing results
      issues: write    # Allow creating issues on failures
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install Playwright browsers
        run: |
          playwright install chromium
      
      - name: Determine target date
        id: date
        run: |
          if [ -n "${{ github.event.inputs.target_date }}" ]; then
            echo "target_date=${{ github.event.inputs.target_date }}" >> $GITHUB_OUTPUT
          else
            # Use yesterday's date
            echo "target_date=$(date -d 'yesterday' +%Y-%m-%d)" >> $GITHUB_OUTPUT
          fi
      
      - name: Check if analysis already exists
        id: check
        run: |
          TARGET_DATE="${{ steps.date.outputs.target_date }}"
          DATE_NO_DASH=$(echo $TARGET_DATE | tr -d '-')
          REPORT_FILE="reports/all_reports_${DATE_NO_DASH}.md"
          
          if [ -f "$REPORT_FILE" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Analysis for $TARGET_DATE already exists: $REPORT_FILE"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "üîÑ Analysis for $TARGET_DATE needs to be run"
          fi
      
      - name: Run SEC Analysis
        if: steps.check.outputs.exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TARGET_DATE="${{ steps.date.outputs.target_date }}"
          MAX_COMPANIES="${{ github.event.inputs.max_companies }}"
          
          echo "üöÄ Starting SEC analysis for $TARGET_DATE"
          
          # Build command
          CMD="python daily_analysis.py --date $TARGET_DATE"
          if [ -n "$MAX_COMPANIES" ]; then
            CMD="$CMD --max-companies $MAX_COMPANIES"
          fi
          
          echo "Running: $CMD"
          $CMD
      
      - name: Validate generated reports
        run: |
          TARGET_DATE="${{ steps.date.outputs.target_date }}"
          DATE_NO_DASH=$(echo $TARGET_DATE | tr -d '-')
          REPORT_FILE="reports/all_reports_${DATE_NO_DASH}.md"
          
          echo "üîç Validating generated reports..."
          
          if [ -f "$REPORT_FILE" ]; then
            echo "‚úÖ Combined report generated: $REPORT_FILE"
            echo "üìä Report size: $(wc -l < $REPORT_FILE) lines"
            
            # Check if report has content (more than just headers)
            if [ $(wc -l < $REPORT_FILE) -gt 50 ]; then
              echo "‚úÖ Report appears to have substantial content"
            else
              echo "‚ö†Ô∏è Report may be incomplete (less than 50 lines)"
            fi
          else
            echo "‚ùå Expected report file not found: $REPORT_FILE"
            exit 1
          fi
      
      - name: Commit and push results
        if: steps.check.outputs.exists == 'false'
        run: |
          TARGET_DATE="${{ steps.date.outputs.target_date }}"
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add new files
          git add reports/
          git add sec_data/ || true  # May not exist or may be gitignored
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "‚úÖ No new changes to commit (analysis already existed)"
          else
            echo "üìù Committing analysis results for $TARGET_DATE"
            git commit -m "Add SEC analysis results for $TARGET_DATE

            - Generated by automated daily analysis workflow
            - Date: $TARGET_DATE
            - Workflow run: ${{ github.run_number }}"
            
            git push
            echo "‚úÖ Results pushed to repository"
          fi
      
      - name: Create summary comment
        if: always()
        run: |
          TARGET_DATE="${{ steps.date.outputs.target_date }}"
          DATE_NO_DASH=$(echo $TARGET_DATE | tr -d '-')
          REPORT_FILE="reports/all_reports_${DATE_NO_DASH}.md"
          
          echo "## üìä Daily SEC Analysis Summary"
          echo ""
          echo "**Date:** $TARGET_DATE"
          echo "**Workflow Run:** #${{ github.run_number }}"
          echo "**Status:** ${{ job.status }}"
          echo ""
          
          if [ -f "$REPORT_FILE" ]; then
            echo "**‚úÖ Report Generated:** [$REPORT_FILE](./$REPORT_FILE)"
            echo "**üìà Report Size:** $(wc -l < $REPORT_FILE) lines"
            
            # Extract key metrics from report if available
            if grep -q "Total Companies Analyzed:" "$REPORT_FILE"; then
              TOTAL_COMPANIES=$(grep "Total Companies Analyzed:" "$REPORT_FILE" | head -1 | sed 's/.*: *//')
              echo "**üè¢ Companies Analyzed:** $TOTAL_COMPANIES"
            fi
            
            if grep -q "Munger Filter Pass Rate:" "$REPORT_FILE"; then
              PASS_RATE=$(grep "Munger Filter Pass Rate:" "$REPORT_FILE" | head -1 | sed 's/.*: *//')
              echo "**üéØ Munger Filter Pass Rate:** $PASS_RATE"
            fi
          else
            echo "**‚ùå Report Status:** Not generated or failed"
          fi
      
      - name: Handle failures
        if: failure()
        run: |
          echo "‚ùå Daily analysis workflow failed"
          echo "Check the logs above for details"
          echo "Target date: ${{ steps.date.outputs.target_date }}"
          
          # Could create an issue here for investigation
          # gh issue create --title "Daily Analysis Failed for ${{ steps.date.outputs.target_date }}" \
          #   --body "Automated daily analysis workflow failed. Check run #${{ github.run_number }}"